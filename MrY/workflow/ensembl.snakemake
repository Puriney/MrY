from MrY import join_path as jpath
from MrY import base_name, dir_name
from MrY import print_logger
from MrY import get_species_name_fpath
import sys
import yaml
from ftplib import FTP


with open(get_species_name_fpath(fname='species_name.yaml'), 'rt') as fin:
    dict_name_common2sci = yaml.load(fin).get('common_scientific_name_pairs',
                                              dict())

SPECIES = config.get('species', ['human'])
# SPECIES = [dict_name_common2sci.get(x.lower(), None) for x in SPECIES]
ASSEMBLY = config.get('assembly', ['GRCh38'])
RELEASE = config.get('release', [90])
ROOTDIR = config.get('root_dir', '.')
ORG = 'Ensembl'

'''
ftp://ftp.ensembl.org/pub/

ftp://ftp.ensembl.org/pub/release-90/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
ftp://ftp.ensembl.org/pub/release-90/gff3/homo_sapiens/Homo_sapiens.GRCh38.90.gff3.gz
ftp://ftp.ensembl.org/pub/release-90/gtf/homo_sapiens/Homo_sapiens.GRCh38.90.gtf.gz
'''
REMOTE_GENOME_FPATH_CODE = ('ftp://ftp.ensembl.org/pub/release-{rel}/fasta/'
                            '{sp}/'
                            'dna/'
                            '{Csp}.{asb}.dna.primary_assembly.fa.gz')
# primary_assembly > toplevel
LOCAL_GENOME_FNAME_CODE = '{asb}.dna.fa.gz'
REMOTE_GTF_FPATH_CODE = ('ftp://ftp.ensembl.org/pub/release-{rel}/gtf/'
                         '{sp}/'
                         '{Csp}.{asb}.{rel}.gtf.gz')
LOCAL_GTF_FNAME_CODE = 'ensembl.{asb}.{rel}.gtf.gz'
REMOTE_GFF_FPATH_CODE = ('ftp://ftp.ensembl.org/pub/release-{rel}/gff3/'
                         '{sp}/'
                         '{Csp}.{asb}.{rel}.gff3.gz')
LOCAL_GFF_FNAME_CODE = 'ensembl.{asb}.{rel}.gff3.gz'

flag_fname_code = '_{sp}_{org}_{asb}_{rel}_done_{task}'


def _grab_avail_genome(query_link):
    ensembl_ftp_site = 'ftp.ensembl.org'
    ftp = FTP(ensembl_ftp_site)
    ftp.login()
    query_fname = base_name(query_link)
    # ftp://ftp.ensembl.org/pub/release-90/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
    query_fpath = query_link[6:].replace(ensembl_ftp_site, '')
    # /pub/release-90/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
    query_dir = dir_name(query_fpath)
    # /pub/release-90/fasta/homo_sapiens/dna/
    query_fname = base_name(query_fpath)
    # Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
    avail_fname = list(map(base_name, ftp.nlst(query_dir)))
    if query_fname in avail_fname:
        return(query_link)
    return(query_link.replace('primary_assembly', 'toplevel'))


'''
Snakemake workflow
'''
workdir: ROOTDIR
'''
All expected results
'''
rule all:
    input:
        expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     base_name(LOCAL_GTF_FNAME_CODE.format(
                         asb='{assembly}', rel='{release_id}'), ext='gz')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GFF_FNAME_CODE.format(
                         asb='{assembly}', rel='{release_id}')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', 'genome', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GENOME_FNAME_CODE.format(
                         asb='{assembly}')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(
                         sp='{species}', org=ORG,
                         asb='{assembly}', rel='{release_id}',
                         task='gunzipped-genomeFasta')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(
                         sp='{species}', org=ORG,
                         asb='{assembly}', rel='{release_id}',
                         task='alignerIndex-Bowtie2')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(
                         sp='{species}', org=ORG,
                         asb='{assembly}', rel='{release_id}',
                         task='alignerIndex-STAR')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
'''
Setup folder structure
'''
rule setup_folder:
    output:
        dir_genome = expand(jpath(ROOTDIR, '{species}', 'genome', ORG,
                                  '{assembly}', 'release_{release_id}'),
                            zip,
                            species=SPECIES,
                            assembly=ASSEMBLY,
                            release_id=RELEASE),
        dir_annotation = expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                                      '{assembly}', 'release_{release_id}'),
                                zip,
                                species=SPECIES,
                                assembly=ASSEMBLY,
                                release_id=RELEASE),
        dir_bowtie = expand(jpath(ROOTDIR, '{species}', 'aligner_index',
                                  'bowtie2', ORG,
                                  '{assembly}', 'release_{release_id}'),
                            zip,
                            species=SPECIES,
                            assembly=ASSEMBLY,
                            release_id=RELEASE),
        dir_star = expand(jpath(ROOTDIR, '{species}', 'aligner_index',
                                'star', ORG,
                                '{assembly}', 'release_{release_id}'),
                          zip,
                          species=SPECIES,
                          assembly=ASSEMBLY,
                          release_id=RELEASE),
        dir_flag = expand(jpath(ROOTDIR, '{species}', '_flag'),
                          species=SPECIES),

        flags = expand(jpath(ROOTDIR, '{species}', '_flag',
                             flag_fname_code.format(
                                 sp='{species}',
                                 org=ORG,
                                 asb='{assembly}',
                                 rel='{release_id}',
                                 task='setupdir')),
                       zip,
                       species=SPECIES,
                       assembly=ASSEMBLY,
                       release_id=RELEASE),
    run:
        for d in [output.dir_genome, output.dir_annotation, output.dir_bowtie,
                  output.dir_star, output.dir_flag]:
            shell('mkdir -p {d}')
        for f in output.flags:
            shell('touch {f}')

'''
Download GTF and GFF3 of annotation
'''
rule download_annotation_gtf:
    input:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='setupdir')),
    output:
        gtf = jpath(ROOTDIR, '{species}', 'annotation', ORG,
                    '{assembly}', 'release_{release_id}',
                    LOCAL_GTF_FNAME_CODE.format(asb='{assembly}',
                                                rel='{release_id}')),
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='download-gtf')),
    run:
        stream_sp_sci = dict_name_common2sci.get(wildcards.species, None)
        remote_gtf = REMOTE_GTF_FPATH_CODE.format(
            sp=stream_sp_sci,
            asb=wildcards.assembly,
            rel=wildcards.release_id,
            Csp=stream_sp_sci.capitalize())
        local_gtf = jpath(dir_name(output.gtf),
                          base_name(output.gtf, ext='gz'))
        shell(
            """
            wget {remote_gtf} -O {output.gtf} -nv && \
            touch {output.flag}
            """)
        print_logger('Download GTF: {} to {}'.format(remote_gtf, output.gtf))


rule download_annotation_gff3:
    input:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='setupdir')),
    output:
        gff3 = jpath(ROOTDIR, '{species}', 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GFF_FNAME_CODE.format(asb='{assembly}',
                                                 rel='{release_id}')),
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='download-gff3')),
    run:
        stream_sp_sci = dict_name_common2sci.get(wildcards.species, None)
        remote_gff3 = REMOTE_GFF_FPATH_CODE.format(
            sp=stream_sp_sci,
            asb=wildcards.assembly,
            rel=wildcards.release_id,
            Csp=stream_sp_sci.capitalize())
        local_gff3 = jpath(dir_name(output.gff3),
                           base_name(output.gff3, ext='gz'))
        shell(
            """
            wget {remote_gff3} -O {output.gff3} -nv && \
            touch {output.flag}
            """)
        print_logger('Download GFF3: {} to {}'.format(remote_gff3,
                                                      output.gff3))


rule task_annotation_gff3:
    input:
        expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GFF_FNAME_CODE.format(
                         asb='{assembly}', rel='{release_id}')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),


rule zcat_anno_gz:
    input:
        gtf = rules.download_annotation_gtf.output.gtf,
        gff3 = rules.download_annotation_gff3.output.gff3,
    output:
        gtf = jpath(ROOTDIR, '{species}', 'annotation', ORG,
                    '{assembly}', 'release_{release_id}',
                    base_name(LOCAL_GTF_FNAME_CODE.format(
                        asb='{assembly}', rel='{release_id}'), ext='gz')),
        gff3 = jpath(ROOTDIR, '{species}', 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     base_name(LOCAL_GFF_FNAME_CODE.format(
                         asb='{assembly}',
                         rel='{release_id}'), ext='gz')),
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='gunzipped-annotation')),
    run:
        print(output.gtf)
        shell('''
            zcat -f {input.gtf} > {output.gtf} && \
            zcat -f {input.gff3} > {output.gff3} && \
            touch {output.flag}''')


rule task_annotation:
    input:
        gtfgz = expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                             '{assembly}', 'release_{release_id}',
                             LOCAL_GTF_FNAME_CODE.format(
                                 asb='{assembly}', rel='{release_id}')),
                       zip,
                       species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        gtf = expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                           '{assembly}', 'release_{release_id}',
                           base_name(LOCAL_GTF_FNAME_CODE.format(
                               asb='{assembly}', rel='{release_id}'),
                               ext='gz')),
                     zip,
                     species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        gff3gz = expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                              '{assembly}', 'release_{release_id}',
                              LOCAL_GFF_FNAME_CODE.format(
                                  asb='{assembly}', rel='{release_id}')),
                        zip,
                        species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        gff3 = expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                            '{assembly}', 'release_{release_id}',
                            base_name(LOCAL_GFF_FNAME_CODE.format(
                                asb='{assembly}', rel='{release_id}'),
                                ext='gz')),
                      zip,
                      species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
'''
Download genome.fasta.gz (primary assembly) and gunzip
'''
rule download_genome_fasta:
    input:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='setupdir')),
    output:
        fa = jpath(ROOTDIR, '{species}', 'genome', ORG,
                   '{assembly}', 'release_{release_id}',
                   LOCAL_GENOME_FNAME_CODE.format(
                       asb='{assembly}')),
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='download-genomeFasta')),
    run:
        stream_sp_sci = dict_name_common2sci.get(wildcards.species, None)
        remote_fa = REMOTE_GENOME_FPATH_CODE.format(
            sp=stream_sp_sci,
            asb=wildcards.assembly,
            rel=wildcards.release_id,
            Csp=stream_sp_sci.capitalize())
        remote_fa_avail = _grab_avail_genome(remote_fa)
        local_fa_fpath = jpath(dir_name(output.fa),
                               base_name(remote_fa_avail, auto=False))
        shell('''
            wget {remote_fa_avail} -O {local_fa_fpath} -nv && \
            ln -s {local_fa_fpath} {output.fa} && \
            touch -h {local_fa_fpath} && \
            touch {output.flag}
            ''')


rule zcat_fa_gz:
    input:
        fa = rules.download_genome_fasta.output.fa,
    output:
        fa = jpath(dir_name(rules.download_genome_fasta.output.fa),
                   base_name(rules.download_genome_fasta.output.fa,
                             ext='gz')),
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='gunzipped-genomeFasta')),
    run:
        shell('zcat {input.fa} -f > {output.fa} && touch {output.flag}')


rule task_genome_fasta:
    input:
        expand(jpath(ROOTDIR, '{species}', 'genome', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GENOME_FNAME_CODE.format(
                         asb='{assembly}')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='gunzipped-genomeFasta')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),

'''
Build index of aligner - Bowtie2
Bowtie2-build creates 1.bt2, 2.bt2, 3.bt2, 4.bt2, 1.rev.bt2, 2.rev.bt2
'''
rule cook_aligner_index_bowtie2:
    input:
        fa = rules.zcat_fa_gz.output.fa,
    output:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-Bowtie2')),
    threads: 42
    run:
        savetodir = jpath(ROOTDIR, wildcards.species, 'aligner_index',
                          'bowtie2', ORG,
                          wildcards.assembly,
                          'release_{}'.format(wildcards.release_id))
        build_prefix = jpath(savetodir, base_name(input.fa, ext='fa'))
        shell("""
            bowtie2-build {input.fa} {build_prefix} \
            --threads {threads} \
            --seed 42 \
            && touch {output.flag}
            """)
        print_logger('Prefix of bowtie2 index is: {}'.format(build_prefix))


rule task_aligner_index_bowtie2:
    input:
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-Bowtie2')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),


'''
Build index of aligner - STAR
'''
rule cook_aligner_index_star:
    input:
        fa = rules.zcat_fa_gz.output.fa,
        gtf = rules.zcat_anno_gz.output.gtf,
    output:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-STAR')),
    threads: 42
    run:
        shell('STAR --version')
        savetodir = jpath(ROOTDIR, wildcards.species, 'aligner_index',
                          'star', ORG,
                          wildcards.assembly,
                          'release_{}'.format(wildcards.release_id))
        shell('''
            STAR --runThreadN {threads} \
            --runMode genomeGenerate \
            --genomeDir {savetodir} \
            --genomeFastaFiles {input.fa} \
            --sjdbGTFfile {input.gtf} && \
            touch {output.flag}
        ''')


rule task_aligner_index_star:
    input:
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-STAR')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
