from MrY import join_path as jpath
from MrY import base_name, dir_name
from MrY import print_logger
from MrY import get_species_name_fpath
import sys
import yaml

with open(get_species_name_fpath(fname='species_name.yaml'), 'rt') as fin:
    dict_name_common2sci = yaml.load(fin).get('common_scientific_name_pairs',
                                              dict())

SPECIES = config.get('species', ['human'])
# SPECIES = [dict_name_common2sci.get(x.lower(), None) for x in SPECIES]
ASSEMBLY = config.get('assembly', ['GRCh38'])
RELEASE = config.get('release', [90])
ROOTDIR = config.get('root_dir', '.')
ORG = 'Ensembl'

'''
ftp://ftp.ensembl.org/pub/

ftp://ftp.ensembl.org/pub/release-90/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
ftp://ftp.ensembl.org/pub/release-90/gff3/homo_sapiens/Homo_sapiens.GRCh38.90.gff3.gz
ftp://ftp.ensembl.org/pub/release-90/gtf/homo_sapiens/Homo_sapiens.GRCh38.90.gtf.gz
'''
REMOTE_GENOME_FPATH_CODE = ('ftp://ftp.ensembl.org/pub/release-{rel}/fasta/'
                            '{sp}/'
                            'dna/'
                            '{Csp}.{asb}.dna.primary_assembly.fa.gz')
LOCAL_GENOME_FNAME_CODE = '{asb}.dna.primary_assembly.fa.gz'
REMOTE_GTF_FPATH_CODE = ('ftp://ftp.ensembl.org/pub/release-{rel}/gtf/'
                         '{sp}/'
                         '{Csp}.{asb}.{rel}.gtf.gz')
LOCAL_GTF_FNAME_CODE = 'ensembl.{asb}.{rel}.gtf.gz'
REMOTE_GFF_FPATH_CODE = ('ftp://ftp.ensembl.org/pub/release-{rel}/gff3/'
                         '{sp}/'
                         '{Csp}.{asb}.{rel}.gff3.gz')
LOCAL_GFF_FNAME_CODE = 'ensembl.{asb}.{rel}.gff3.gz'

flag_fname_code = '_{sp}_{org}_{asb}_{rel}_done_{task}'


workdir: ROOTDIR


def _capitalize(x):
    return('{}{}'.format(x[:1].upper(), x[1:]))


rule all:
    input:
        expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GTF_FNAME_CODE.format(
                         asb='{assembly}', rel='{release_id}')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GFF_FNAME_CODE.format(
                         asb='{assembly}', rel='{release_id}')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', 'genome', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GENOME_FNAME_CODE.format(
                         asb='{assembly}')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(
                         sp='{species}', org=ORG,
                         asb='{assembly}', rel='{release_id}',
                         task='gunzipped-genomeFasta')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(
                         sp='{species}', org=ORG,
                         asb='{assembly}', rel='{release_id}',
                         task='alignerIndex-Bowtie2')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),


rule setup_folder:
    output:
        dir_genome = expand(jpath(ROOTDIR, '{species}', 'genome', ORG,
                                  '{assembly}', 'release_{release_id}'),
                            zip,
                            species=SPECIES,
                            assembly=ASSEMBLY,
                            release_id=RELEASE),
        dir_annotation = expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                                      '{assembly}', 'release_{release_id}'),
                                zip,
                                species=SPECIES,
                                assembly=ASSEMBLY,
                                release_id=RELEASE),
        dir_bowtie = expand(jpath(ROOTDIR, '{species}', 'aligner_index',
                                  'bowtie2', ORG,
                                  '{assembly}', 'release_{release_id}'),
                            zip,
                            species=SPECIES,
                            assembly=ASSEMBLY,
                            release_id=RELEASE),
        dir_star = expand(jpath(ROOTDIR, '{species}', 'aligner_index',
                                'star', ORG,
                                '{assembly}', 'release_{release_id}'),
                          zip,
                          species=SPECIES,
                          assembly=ASSEMBLY,
                          release_id=RELEASE),
        dir_flag = expand(jpath(ROOTDIR, '{species}', '_flag'),
                          species=SPECIES),

        flags = expand(jpath(ROOTDIR, '{species}', '_flag',
                             flag_fname_code.format(
                                 sp='{species}',
                                 org=ORG,
                                 asb='{assembly}',
                                 rel='{release_id}',
                                 task='setupdir')),
                       zip,
                       species=SPECIES,
                       assembly=ASSEMBLY,
                       release_id=RELEASE),
    run:
        for d in [output.dir_genome, output.dir_annotation, output.dir_bowtie,
                  output.dir_star, output.dir_flag]:
            shell('mkdir -p {d}')
        for f in output.flags:
            shell('touch {f}')


rule download_annotation_gtf:
    input:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='setupdir')),
    output:
        gtf = jpath(ROOTDIR, '{species}', 'annotation', ORG,
                    '{assembly}', 'release_{release_id}',
                    LOCAL_GTF_FNAME_CODE.format(asb='{assembly}',
                                                rel='{release_id}')),
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='download-gtf')),
    run:
        stream_sp_sci = dict_name_common2sci.get(wildcards.species, None)
        remote_gtf = REMOTE_GTF_FPATH_CODE.format(
            sp=stream_sp_sci,
            asb=wildcards.assembly,
            rel=wildcards.release_id,
            Csp=stream_sp_sci.capitalize())
        shell(
            """
            wget {remote_gtf} -O {output.gtf} -nv && touch {output.flag}
            """)
        print_logger('Download GTF: {} to {}'.format(remote_gtf, output.gtf))


rule task_annotation_gtf:
    input:
        expand(jpath(ROOTDIR, '{species}', 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     LOCAL_GTF_FNAME_CODE.format(
                         asb='{assembly}', rel='{release_id}')),
               zip, species=SPECIES, assembly=ASSEMBLY, release_id=RELEASE),
