import sys
import os
import yaml
from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
FTP = FTPRemoteProvider()

from MrY import join_path as jpath
from MrY import base_name, dir_name
from MrY import print_logger
from MrY import get_species_name_fpath


with open(get_species_name_fpath(fname='species_name.yaml'), 'rt') as fin:
    dict_name_common2sci = yaml.load(fin).get('common_scientific_name_pairs',
                                              dict())

SPECIES = config.get('species')
# SPECIES = [dict_name_common2sci.get(x.lower(), None) for x in SPECIES]
ASSEMBLY = config.get('assembly')
RELEASE = config.get('release')
ROOTDIR = config.get('root_dir')
ORG = config.get('org')

REMOTE_GENOME_FPATH_CODE = config.get('LINK_GENOME')
REMOTE_ANNO_FPATH_CODE = config.get('LINK_ANNOTATION')

flag_fname_code = '_{sp}_{org}_{asb}_{rel}_done_{task}'

'''
Snakemake workflow
'''
workdir: ROOTDIR
'''
All expected results
'''
rule all:
    input:
        expand(jpath(ROOTDIR, '{species}', 'genome', '{org}',
                     '{assembly}', 'release_' + '{release_id}',
                     'genome.fa'),
               zip,
               species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                     '{assembly}', 'release_' + '{release_id}',
                     'anno_link'),
               zip,
               species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE),

        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org='{org}',
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-Bowtie2')),
               zip, species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org='{org}',
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-STAR')),
               zip, species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE),
'''
Setup folder structure
'''
rule setup_folder:
    output:
        dir_genome = expand(jpath(ROOTDIR, '{species}', 'genome',
                                  '{org}',
                                  '{assembly}', 'release_{release_id}'),
                            zip,
                            species=SPECIES,
                            org=ORG,
                            assembly=ASSEMBLY,
                            release_id=RELEASE),
        dir_annotation = expand(jpath(ROOTDIR, '{species}', 'annotation',
                                      '{org}',
                                      '{assembly}', 'release_{release_id}'),
                                zip,
                                species=SPECIES,
                                org=ORG,
                                assembly=ASSEMBLY,
                                release_id=RELEASE),
        dir_bowtie = expand(jpath(ROOTDIR, '{species}', 'aligner_index',
                                  'bowtie2', '{org}',
                                  '{assembly}', 'release_{release_id}'),
                            zip,
                            species=SPECIES,
                            org=ORG,
                            assembly=ASSEMBLY,
                            release_id=RELEASE),
        dir_star = expand(jpath(ROOTDIR, '{species}', 'aligner_index',
                                'star', '{org}',
                                '{assembly}', 'release_{release_id}'),
                          zip,
                          species=SPECIES,
                          org=ORG,
                          assembly=ASSEMBLY,
                          release_id=RELEASE),
        dir_flag = expand(jpath(ROOTDIR, '{species}', '_flag'),
                          species=SPECIES),

        flags = expand(jpath(ROOTDIR, '{species}', '_flag',
                             flag_fname_code.format(
                                 sp='{species}',
                                 org='{org}',
                                 asb='{assembly}',
                                 rel='{release_id}',
                                 task='setupdir')),
                       zip,
                       species=SPECIES,
                       org=ORG,
                       assembly=ASSEMBLY,
                       release_id=RELEASE),
    run:
        for d in [output.dir_genome, output.dir_annotation, output.dir_bowtie,
                  output.dir_star, output.dir_flag]:
            if not os.path.isdir(d):
                shell('mkdir -p {d}')
        for f in output.flags:
            shell('touch {f}')


'''
Download GTF or GFF3 of annotation
'''
rule task_annotation:
    input:
        # anno = [FTP.remote(x) for x in REMOTE_ANNO_FPATH_CODE],
        # flags = expand(jpath(ROOTDIR, '{species}', '_flag',
        #                      flag_fname_code.format(
        #                          sp='{species}',
        #                          org='{org}',
        #                          asb='{assembly}',
        #                          rel='{release_id}',
        #                          task='setupdir')),
        #                zip,
        #                species=SPECIES, org=ORG,
        #                assembly=ASSEMBLY, release_id=RELEASE),
        rules.setup_folder.output.dir_annotation,
    output:
        flags = expand(jpath(ROOTDIR, '{species}', '_flag',
                             flag_fname_code.format(
                                 sp='{species}',
                                 org='{org}',
                                 asb='{assembly}',
                                 rel='{release_id}',
                                 task='gunzipped-annotation')),
                       zip,
                       species=SPECIES, org=ORG,
                       assembly=ASSEMBLY, release_id=RELEASE),
        anno = expand(jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                            '{assembly}', 'release_' + '{release_id}',
                            'anno_link'),
                      zip,
                      species=SPECIES, org=ORG,
                      assembly=ASSEMBLY, release_id=RELEASE),
    run:
        for remote_anno_gz, species, org, assembly, release_id in zip(
                REMOTE_ANNO_FPATH_CODE, SPECIES, ORG, ASSEMBLY, RELEASE):
            anno_fname = base_name(remote_anno_gz, auto=False)
            if '.gtf.gz' in anno_fname.lower():
                local_fname = 'annotation.gtf.gz'
            elif ('.gff.gz' in anno_fname.lower() or
                  '.gff3.gz' in anno_fname.lower()):
                local_fname = 'annotation.gff3.gz'
            else:
                local_fname = base_name(remote_anno_gz)
            local_anno_gz = jpath(ROOTDIR, species, 'annotation',
                                  org, assembly,
                                  'release_{}'.format(release_id),
                                  local_fname)
            local_anno = jpath(dir_name(local_anno_gz),
                               base_name(local_anno_gz, ext='gz'))
            flag1 = jpath(ROOTDIR, species, '_flag', flag_fname_code.format(
                sp=species, org=org,
                asb=assembly, rel=release_id, task='download_annotation'))
            flag2 = jpath(ROOTDIR, species, '_flag', flag_fname_code.format(
                sp=species, org=org,
                asb=assembly, rel=release_id, task='gunzipped-annotation'))
            shell('''
            wget {remote_anno_gz} -O {local_anno_gz} -nv && \
            zcat {local_anno_gz} > {local_anno} && \
            ln -s {local_anno} {output.anno} && \
            touch -h {output.anno} && \
            touch {flag1} {flag2}
            ''')

'''
Download FASTA of genome
'''
rule task_genome_fasta:
    input:
        # flags = expand(jpath(ROOTDIR, '{species}', '_flag',
        #                      flag_fname_code.format(
        #                          sp='{species}', org='{org}',
        #                          asb='{assembly}', rel='{release_id}',
        #                          task='setupdir')),
        #                zip,
        #                species=SPECIES, org=ORG,
        #                assembly=ASSEMBLY, release_id=RELEASE),
        rules.setup_folder.output.dir_genome,
    output:
        flags = expand(jpath(ROOTDIR, '{species}', '_flag',
                             flag_fname_code.format(
                                 sp='{species}', org='{org}',
                                 asb='{assembly}', rel='{release_id}',
                                 task='download-genomeFasta')),
                       zip,
                       species=SPECIES, org=ORG,
                       assembly=ASSEMBLY, release_id=RELEASE),
        fagz = expand(jpath(ROOTDIR, '{species}', 'genome', '{org}',
                            '{assembly}', 'release_' + '{release_id}',
                            'genome.fa.gz'),
                      zip,
                      species=SPECIES, org=ORG,
                      assembly=ASSEMBLY, release_id=RELEASE),
        fa = expand(jpath(ROOTDIR, '{species}', 'genome', '{org}',
                          '{assembly}', 'release_' + '{release_id}',
                          'genome.fa'),
                    zip,
                    species=SPECIES, org=ORG,
                    assembly=ASSEMBLY, release_id=RELEASE),
    run:
        print(REMOTE_GENOME_FPATH_CODE)
        for remote_fa_gz, species, org, assembly, release_id in zip(
                REMOTE_GENOME_FPATH_CODE, SPECIES, ORG, ASSEMBLY, RELEASE):
            local_fname = 'genome.fa.gz'
            local_fa_gz = jpath(ROOTDIR, species, 'genome',
                                org, assembly,
                                'release_{}'.format(release_id),
                                local_fname)
            local_fa = jpath(dir_name(local_fa_gz),
                             base_name(local_fa_gz, ext='gz'))
            flag1 = jpath(ROOTDIR, species, '_flag', flag_fname_code.format(
                sp=species, org=org,
                asb=assembly, rel=release_id, task='download-genomeFasta'))
            flag2 = jpath(ROOTDIR, species, '_flag', flag_fname_code.format(
                sp=species, org=org,
                asb=assembly, rel=release_id, task='gunzipped-genomeFasta'))
            shell('''
            wget {remote_fa_gz} -O {local_fa_gz} -nv && \
            zcat {local_fa_gz} > {local_fa} && \
            touch {flag1} {flag2}
            ''')


'''
Build index of aligner - Bowtie2
Bowtie2-build creates 1.bt2, 2.bt2, 3.bt2, 4.bt2, 1.rev.bt2, 2.rev.bt2
'''
rule cook_aligner_index_bowtie2:
    input:
        fa = jpath(ROOTDIR, '{species}', 'genome', '{org}',
                   '{assembly}', 'release_' + '{release_id}',
                   'genome.fa'),
    output:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org='{org}',
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-Bowtie2')),
    threads: 42
    run:
        savetodir = jpath(ROOTDIR, wildcards.species, 'aligner_index',
                          'bowtie2', wildcards.org,
                          wildcards.assembly,
                          'release_{}'.format(wildcards.release_id))
        build_prefix = jpath(savetodir, base_name(input.fa, ext='fa'))
        shell("""
            bowtie2-build {input.fa} {build_prefix} \
            --threads {threads} \
            --seed 42 \
            && touch {output.flag}
            """)
        print_logger('Prefix of bowtie2 index is: {}'.format(build_prefix))


rule task_aligner_index_bowtie2:
    input:
        rules.setup_folder.output.dir_bowtie,
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org='{org}',
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-Bowtie2')),
               zip, species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE),


'''
Build index of aligner - STAR
'''
rule cook_aligner_index_star:
    input:
        fa = jpath(ROOTDIR, '{species}', 'genome', '{org}',
                   '{assembly}', 'release_' + '{release_id}',
                   'genome.fa'),
        anno = jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                     '{assembly}', 'release_' + '{release_id}',
                     'anno_link'),
    output:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org='{org}',
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-STAR')),
    threads: 42
    run:
        shell('STAR --version')
        savetodir = jpath(ROOTDIR, wildcards.species, 'aligner_index',
                          'star', wildcards.org,
                          wildcards.assembly,
                          'release_{}'.format(wildcards.release_id))
        outFileNamePrefix = savetodir + os.sep
        shell('''
            STAR --runThreadN {threads} \
            --runMode genomeGenerate \
            --genomeDir {savetodir} \
            --genomeFastaFiles {input.fa} \
            --sjdbGTFfile {input.anno} \
            --outFileNamePrefix {outFileNamePrefix} \
            && touch {output.flag}
        ''')


rule task_aligner_index_star:
    input:
        rules.setup_folder.output.dir_star,
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org='{org}',
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-STAR')),
               zip, species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE),
