import sys
import os
import yaml
from ftplib import FTP

from MrY import join_path as jpath
from MrY import base_name, dir_name
from MrY import print_logger
from MrY import get_species_name_fpath


with open(get_species_name_fpath(fname='species_name.yaml'), 'rt') as fin:
    dict_name_common2sci = yaml.load(fin).get('common_scientific_name_pairs',
                                              dict())

SPECIES = config.get('species')
# SPECIES = [dict_name_common2sci.get(x.lower(), None) for x in SPECIES]
ASSEMBLY = config.get('assembly')
RELEASE = config.get('release')
ROOTDIR = config.get('root_dir')
ORG = config.get('org')

REMOTE_GENOME_FPATH_CODE = config.get('LINK_FASTA')
REMOTE_ANNO_FPATH_CODE = config.get('LINK_ANNOTATION')

'''
Snakemake workflow
'''
workdir: ROOTDIR
'''
All expected results
'''
rule all:
    input:
        expand(jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                     '{assembly}', 'release_{release_id}',
                     base_name('{fagz}')),
               zip, species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE,
               fagz=REMOTE_GENOME_FPATH_CODE),
        expand(jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                     '{assembly}', 'release_{release_id}',
                     base_name('{annogz}')),
               zip, species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE,
               annogz=REMOTE_ANNO_FPATH_CODE),

        # expand(jpath(ROOTDIR, '{species}', '_flag',
        #              flag_fname_code.format(
        #                  sp='{species}', org='{org}',
        #                  asb='{assembly}', rel='{release_id}',
        #                  task='gunzipped-genomeFasta')),
        #        zip, species=SPECIES, org=ORG,
        #        assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(
                         sp='{species}', org='{org}',
                         asb='{assembly}', rel='{release_id}',
                         task='alignerIndex-Bowtie2')),
               zip, species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(
                         sp='{species}', org='{org}',
                         asb='{assembly}', rel='{release_id}',
                         task='alignerIndex-STAR')),
               zip, species=SPECIES, org=ORG,
               assembly=ASSEMBLY, release_id=RELEASE),
'''
Setup folder structure
'''
rule setup_folder:
    output:
        dir_genome = expand(jpath(ROOTDIR, '{species}', 'genome',
                                  '{org}',
                                  '{assembly}', 'release_{release_id}'),
                            zip,
                            species=SPECIES,
                            org=ORG,
                            assembly=ASSEMBLY,
                            release_id=RELEASE),
        dir_annotation = expand(jpath(ROOTDIR, '{species}', 'annotation',
                                      '{org}',
                                      '{assembly}', 'release_{release_id}'),
                                zip,
                                species=SPECIES,
                                org=ORG,
                                assembly=ASSEMBLY,
                                release_id=RELEASE),
        dir_bowtie = expand(jpath(ROOTDIR, '{species}', 'aligner_index',
                                  'bowtie2', '{org}',
                                  '{assembly}', 'release_{release_id}'),
                            zip,
                            species=SPECIES,
                            org=ORG,
                            assembly=ASSEMBLY,
                            release_id=RELEASE),
        dir_star = expand(jpath(ROOTDIR, '{species}', 'aligner_index',
                                'star', '{org}',
                                '{assembly}', 'release_{release_id}'),
                          zip,
                          species=SPECIES,
                          org=ORG,
                          assembly=ASSEMBLY,
                          release_id=RELEASE),
        dir_flag = expand(jpath(ROOTDIR, '{species}', '_flag'),
                          species=SPECIES),

        flags = expand(jpath(ROOTDIR, '{species}', '_flag',
                             flag_fname_code.format(
                                 sp='{species}',
                                 org='{org}',
                                 asb='{assembly}',
                                 rel='{release_id}',
                                 task='setupdir')),
                       zip,
                       species=SPECIES,
                       org=ORG,
                       assembly=ASSEMBLY,
                       release_id=RELEASE),
    run:
        for d in [output.dir_genome, output.dir_annotation, output.dir_bowtie,
                  output.dir_star, output.dir_flag]:
            shell('mkdir -p {d}')
        for f in output.flags:
            shell('touch {f}')


'''
Download GTF or GFF3 of annotation
'''
rule download_annotation:
    input:
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org='{org}',
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='setupdir')),
    output:
        anno = jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                     '{assembly}', 'release_{release_id}',
                     base_name('{annogz}')),
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='download-annotation')),
    run:
        remote_anno = wildcards.annogz
        shell(
            """
            wget {remote_anno} -O {output.anno} -nv && \
            touch {output.flag}
            """)
        print_logger('Download annotation: {} to {}'.format(
            remote_anno, output.gtf))


rule zcat_anno_gz:
    input:
        anno = jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                     '{assembly}', 'release_{release_id}',
                     base_name('{annogz}')),
    output:
        anno = jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                    '{assembly}', 'release_{release_id}',
                    base_name('{annogz}', ext='gz')),
        flag = jpath(ROOTDIR, '{species}', '_flag',
                     flag_fname_code.format(sp='{species}', org='{org}',
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='gunzipped-annotation')),
    run:
        shell('''
            zcat -f {input.annot} > {output.annot} && \
            touch {output.flag}''')


rule task_annotation:
    input:
        gtfgz = expand(jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                             '{assembly}', 'release_{release_id}',
                             base_name('{annogz}')),
                       zip,
                       species=SPECIES, org=ORG,
                       assembly=ASSEMBLY, release_id=RELEASE,
                       annogz=REMOTE_ANNO_FPATH_CODE),
        gtfgz = expand(jpath(ROOTDIR, '{species}', 'annotation', '{org}',
                             '{assembly}', 'release_{release_id}',
                             base_name('{annogz}', ext='gz')),
                       zip,
                       species=SPECIES, org=ORG,
                       assembly=ASSEMBLY, release_id=RELEASE,
                       annogz=REMOTE_ANNO_FPATH_CODE),

