from MrY import join_path as jpath
from MrY import base_name, dir_name
from MrY import print_logger


SPECIES = config.get('species', 'human')
ASSEMBLY = config.get('assembly', 'GRCh38')
RELEASE = config.get('release', 26)
ROOTDIR = config.get('root_dir', '/Users/yunyan/Downloads/test')
ORG = 'GENCODE'


'''
todo: python web to build a chain-map: assembly ~ release to save a yaml file
'''
# ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human
# release_27
# GRCh38.primary_assembly.genome.fa.gz
# gencode.v27.primary_assembly.annotation.gtf.gz
# gencode.v27.primary_assembly.annotation.gff3.gz
REMOTE_FTP_PREFIX = ('ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/'
                     'release_{}')
REMOTE_GENOME_FNAME_CODE = '{}.primary_assembly.genome.fa.gz'
REMOTE_GTF_FNAME_CODE = 'gencode.v{}.primary_assembly.annotation.gtf.gz'
REMOTE_GFF_FNAME_CODE = 'gencode.v{}.primary_assembly.annotation.gff3.gz'

flag_fname_code = '_{sp}_{org}_{asb}_{rel}_done_{task}'

'''
Snakemake workflow
'''
workdir: jpath(ROOTDIR, SPECIES)
proj_dir = jpath(ROOTDIR, SPECIES)


rule all:
    input:
        expand(jpath(proj_dir, 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     REMOTE_GTF_FNAME_CODE.format('{release_id}')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(proj_dir, 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     REMOTE_GFF_FNAME_CODE.format('{release_id}')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(proj_dir, 'genome', ORG,
                     '{assembly}', 'release_{release_id}',
                     REMOTE_GENOME_FNAME_CODE.format('{assembly}')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='gunzipped-genomeFasta')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-Bowtie2')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),


rule setup_folder:
    output:
        dir_genome = expand(jpath(proj_dir, 'genome', ORG,
                                  '{assembly}', 'release_{release_id}'),
                            zip, assembly=ASSEMBLY, release_id=RELEASE),
        dir_annotation = expand(jpath(proj_dir, 'annotation', ORG,
                                      '{assembly}', 'release_{release_id}'),
                                zip, assembly=ASSEMBLY, release_id=RELEASE),
        dir_bowtie = expand(jpath(proj_dir, 'aligner_index', 'bowtie2', ORG,
                                  '{assembly}', 'release_{release_id}'),
                            zip, assembly=ASSEMBLY, release_id=RELEASE),
        dir_star = expand(jpath(proj_dir, 'aligner_index', 'star', ORG,
                                '{assembly}', 'release_{release_id}'),
                          zip, assembly=ASSEMBLY, release_id=RELEASE),
        dir_flag = jpath(proj_dir, '_flag'),

        flags = expand(jpath(proj_dir, '_flag',
                             flag_fname_code.format(sp=SPECIES,
                                                    org=ORG,
                                                    asb='{assembly}',
                                                    rel='{release_id}',
                                                    task='setupdir')),
                       zip, assembly=ASSEMBLY, release_id=RELEASE),
    run:
        for d in [output.dir_genome, output.dir_annotation, output.dir_bowtie,
                  output.dir_star, output.dir_flag]:
            shell('mkdir -p {d}')
        for f in output.flags:
            shell('touch {f}')


rule download_annotation_gtf:
    input:
        flag = jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES,
                                            org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='setupdir')),
    output:
        gtf = jpath(proj_dir, 'annotation', ORG,
                    '{assembly}', 'release_{release_id}',
                    REMOTE_GTF_FNAME_CODE.format('{release_id}')),
        flag = jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='download-gtf')),
    run:
        stream_release_id = wildcards.release_id
        remote_ftp_prefix = REMOTE_FTP_PREFIX.format(
            SPECIES, stream_release_id)
        remote_gtf = remote_ftp_prefix + '/' + \
            REMOTE_GTF_FNAME_CODE.format(stream_release_id)
        shell(
            """
            wget {remote_gtf} -O {output.gtf} -nv && touch {output.flag}
            """)
        print_logger('Download GTF: {} to {}'.format(remote_gtf, output.gtf))


rule task_annotation_gtf:
    input:
        expand(jpath(proj_dir, 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     REMOTE_GTF_FNAME_CODE.format('{release_id}')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),


rule download_annotation_gff3:
    input:
        flag = jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES,
                                            org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='setupdir')),
    output:
        gff3 = jpath(proj_dir, 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     REMOTE_GFF_FNAME_CODE.format('{release_id}')),
        flag = jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='download-gff3')),
    run:
        remote_ftp_prefix = REMOTE_FTP_PREFIX.format(SPECIES,
                                                     wildcards.release_id)
        remote_gff3 = remote_ftp_prefix + '/' + \
            REMOTE_GFF_FNAME_CODE.format(wildcards.release_id)

        shell(
            """
            wget {remote_gff3} -O {output.gff3} -nv && touch {output.flag}
            """)
        print_logger('Download GTF: {} to {}'.format(remote_gff3, output.gff3))


rule task_annotation_gff3:
    input:
        expand(jpath(proj_dir, 'annotation', ORG,
                     '{assembly}', 'release_{release_id}',
                     REMOTE_GFF_FNAME_CODE.format('{release_id}')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),


rule download_genome_fasta:
    input:
        flag = jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES,
                                            org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='setupdir')),
    output:
        flag = jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='download-genomeFasta')),
        fa = jpath(proj_dir, 'genome', ORG,
                   '{assembly}', 'release_{release_id}',
                   REMOTE_GENOME_FNAME_CODE.format('{assembly}')),
    run:
        remote_ftp_prefix = REMOTE_FTP_PREFIX.format(
            SPECIES, wildcards.release_id)
        remote_fa = remote_ftp_prefix + '/' + \
            REMOTE_GENOME_FNAME_CODE.format(wildcards.assembly)
        shell(
            """
            wget {remote_fa} -O {output.fa} -nv && touch {output.flag}
            """)
        print_logger('Download FASTA of genome: {} to {}'.format(
            remote_fa, output.fa))


rule zcat_fa_gz:
    input:
        # fa = jpath('genome', ORG,
        #            '{assembly}', '{release_id}',
        #            REMOTE_GENOME_FNAME_CODE.format('{assembly}')),
        fa = rules.download_genome_fasta.output.fa,
    output:
        fa = jpath(dir_name(rules.download_genome_fasta.output.fa),
                   base_name(rules.download_genome_fasta.output.fa,
                             ext='gz')),
        flag = jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='gunzipped-genomeFasta')),
    run:
        shell('zcat {input.fa} -f > {output.fa} && touch {output.flag}')


rule task_genome_fasta:
    input:
        expand(jpath(proj_dir, 'genome', ORG,
                     '{assembly}', 'release_{release_id}',
                     REMOTE_GENOME_FNAME_CODE.format('{assembly}')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),
        expand(jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='gunzipped-genomeFasta')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),


rule cook_aligner_index_bowtie2:
    input:
        fa = rules.zcat_fa_gz.output.fa,
    output:
        flag = jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-Bowtie2')),
    threads: 42
    run:
        savetodir = jpath(proj_dir, 'aligner_index', 'bowtie2', ORG,
                          wildcards.assembly,
                          'release_{}'.format(wildcards.release_id))
        build_prefix = jpath(savetodir, base_name(input.fa, ext='fa'))
        shell("""
            bowtie2-build {input.fa} {build_prefix} \
            --threads {threads} \
            --seed 42 \
            && touch {output.flag}
            """)
        print_logger('Prefix of bowtie2 index is: {}'.format(build_prefix))


rule aligner_index_bowtie2:
    input:
        expand(jpath(proj_dir, '_flag',
                     flag_fname_code.format(sp=SPECIES, org=ORG,
                                            asb='{assembly}',
                                            rel='{release_id}',
                                            task='alignerIndex-Bowtie2')),
               zip, assembly=ASSEMBLY, release_id=RELEASE),


# rule cleanall:
#     run:
#         shell('rm -rf {workdir}')
